<?xml version="1.0" encoding="UTF-8"?>
<!-- 프로젝트 -->
<project name="sys" basedir=".">

  <property environment="env" />
  <!-- 기본 설정 -->
  <property name="tomcat.dir"     value="E:/Server/tomcat"/>
  <property name="java.dir"         value="C:/Program Files/Java/jdk1.5.0_06"/>
  <property name="web.dir"         value="E:/Service/webapps/mei"/>
  <property name="encoding"      value="UTF-8"/>

  <!-- 프로퍼티 설정 -->
  <property name="src.dir"     value="${web.dir}/WEB-INF/src"/>
  <property name="classes.dir" value="${web.dir}/WEB-INF/classes"/>
  <property name="lib.dir"     value="${web.dir}/WEB-INF/lib"/>

  <property name="tomcat.lib.dir"     value="${tomcat.dir}/common/lib"/>
  <property name="java.lib.dir"     value="${java.dir}/lib"/>

  <!-- 라이브러리 -->
  <path id="class-path">
    <pathelement path="${tomcat.lib.dir}/servlet-api.jar"/>
    <pathelement path="${tomcat.lib.dir}/jsp-api.jar"/>
    <pathelement path="${java.lib.dir}/tools.jar"/>

    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>

  </path>

  <target name="build-install">
    <java classname="com.syaku.core.builder.MeiInstall" classpathref="class-path">
      <classpath>
       <pathelement path="${classes.dir}" />
      </classpath>
    </java>
  </target>

  <target name="build-step1">
    <java classname="com.syaku.core.builder.MeiBuilder" classpathref="class-path">
      <arg value="${web.dir}" />
      <arg value="${src.dir}" />
      <arg value="${classes.dir}" />
      <arg value="" />
      <classpath>
       <pathelement path="${classes.dir}" />
      </classpath>
    </java>
  </target>

  <!-- classes dir 생성 및 삭제 -->
  <target name="folder-install">
    <delete dir="${classes.dir}" />
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${classes.dir}/com/syaku/resource" />
  </target>

  <target name="folder-reinstall">
    <delete dir="${classes.dir}" excludes="**/resource/*" />
    <mkdir dir="${classes.dir}/com/syaku/resource" />
  </target>

  <target name="convert">
    <delete><fileset dir="${classes.dir}" includes="**/*.properties" excludes="**/resource/*" /></delete>
    <native2ascii encoding="${encoding}" src="${src.dir}" dest="${classes.dir}" includes="**/*.properties" />
  </target>

  <target name="copy">
    <!-- 파일 복사 : 설정파일들  (java , properties 제외) -->
    <copy todir="${classes.dir}" overwrite="true">
      <fileset dir="${src.dir}" excludes="**/*.java, **/*.properties" />
    </copy>
  </target>

  <!-- 자바 컴파일 -->
  <target name="compile">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" encoding="${encoding}">
      <!-- 라이브러리 -->
      <classpath refid="class-path" />
    </javac>

  </target>

  <!-- 자바 클래스 jar 담기
  <target name="jar" depends="re-classes-dir, compile, convert, copy">
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${jar.dir}/${name}.jar" basedir="${classes.dir}" />
  </target> -->

  <!-- 특정 경로 자바 클래스 jar 담기
  <target name="use-jar">
    <jar destfile="./mei1.0.jar" basedir="${classes.dir}" />
  </target>
   -->

  <target name="install" depends="build-install"/>
  <target name="recovery" depends="folder-install, compile , convert, copy , build-step1"/>
  <target name="r" depends="folder-reinstall, compile , convert, copy , build-step1"/>
  <target name="b" depends="compile , convert, copy , build-step1"/>
  <target name="c" depends="compile"/>
  <target name="d" depends="convert, copy , build-step1"/>

<!--
  <target name="javac" depends="create-classes-dir, compile"/>
  <target name="javab" depends="create-classes-dir, compile , convert, copy , build-step1"/>
  <target name="javar" depends="delete-classes-dir, create-classes-dir, compile, convert, copy , build-step1"/>
  <target name="javaf" depends="convert, copy , build-step1"/>
  <target name="javac-jar" depends="jar"/>
  <target name="make-jar" depends="use-jar"/>
  -->
</project>